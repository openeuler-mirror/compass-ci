# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.

class Sched

	# for avoiding id duplication
	@@last_jobid = 0_i64

  # API method to handle job submission
  def api_submit_job(job_content : Hash(String, JSON::Any)) : Result
    begin
      # Initialize the job
      origin_job = init_job(job_content)

      # if has upload_field, return it and notify client resubmit
      fields_need_upload = origin_job.process_user_files_upload
      if fields_need_upload
        return Result.error(HTTP::Status::BAD_REQUEST, [{
          "message" => "#{fields_need_upload}",
          "errcode" => "RETRY_UPLOAD",
        }].to_json)
      end

      # Process the job submission
      jobs = Sched.instance.cluster.handle_job(origin_job)
      response = [] of Hash(String, String)

      jobs.each do |job|
        job.delete_account_info
        init_job_id(job)
        Sched.instance.pkgbuild.handle_job(job)
        on_job_submit(job)

        response << {
          "job_id"      => job.id,
          "message"     => "",
          "job_state"   => "submit",
          "result_root" => "#{BASE_DIR}#{job.result_root}",
        }
        @log.info(response.last)
      end

      Result.success(response.to_json)
    rescue e
      @log.warn({
        "message"       => e.inspect_with_backtrace,
        "job_content"   => Sched.public_content(job_content).to_json,
      }) if job_content

      Result.error(HTTP::Status::INTERNAL_SERVER_ERROR, [{
        "job_id"    => "0",
        "job_state" => "submit",
        "message"   => e.inspect_with_backtrace,
      }].to_json)
    end
  end

  # Redact sensitive information from job content
  def self.public_content(job_content : Hash(String, JSON::Any)) : Hash(String, JSON::Any)
    return {} of String => JSON::Any unless job_content

    temp = job_content.clone
    sensitive_fields = [
      "my_email", "my_token", "job_token", "my_ssh_pubkey", "secrets", "pkg_data", "stats"
    ]
    sensitive_fields.each { |field| temp.delete(field) }
    temp
  end

  # Helper method to initialize a job
  def init_job(job_content : Hash(String, JSON::Any)) : Job
    # submit $RESULT_ROOT/job.yaml may carry on these fields generated by
    # previous schedule, so clear these stale data
    stale_fields = [
      "id", "plugins", "errid", "stats",
      "start_time", "end_time", "finish_time",
      "job_health", "job_stage", "job_state"
    ]
    stale_fields.each { |field| job_content.delete(field) }

    # Create and submit the job
    job = Job.new(job_content, nil)
    job.submit
    job
  end

  def init_job_id(job)
    id = job.id == "-1" ? Sched.get_job_id : job.id
    save_secrets(job, id)
    job.update_id(id)
  end

  # 3digit LAB_ID + 1digit WORKER_ID + datetime
  # This can barely fit into Int64
  # Time.now.strftime("3331%y%m%d%H%M%S%3N")
  # => "333124042909335481"
  # 1<<63
  # =>  9223372036854775808
  def Sched.get_job_id
    id = Time.local.to_s("#{@@options.lab_id}%y%m%d%H%M%S%3N")

		# check duplicate with @@last_jobid
		id64 = id.to_i64
		if id64 <= @@last_jobid
			id64 = @@last_jobid + 1
      id = id64.to_s
    end
    @@last_jobid = id64

    id
  end

end
