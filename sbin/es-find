#!/usr/bin/env ruby
# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.
# frozen_string_literal: true

# Usage:
#       es-find key=val ...
#       es-find -r "start_time=2021-01-01T00:00:00+0800,2021-01-01T23:59:59+0800;..."
#       es-find tbox_group=vm-2p8g -c suite,job_state
# if given multi keys, they create AND conditions
# if given val1,val2,... for a key, they create OR conditions
# Eg: query (testbox is xxx or yyy) and (suite is aaa) and (user is bbb).
#       es-find testbox=xxx,yyy suite=aaa user=bbb

LKP_SRC ||= ENV['LKP_SRC'] || File.dirname(__dir__)

require 'yaml'
require 'optparse'
require 'json'
require "#{LKP_SRC}/lib/hash"
require_relative '../lib/es_query.rb'
require_relative '../container/defconfig.rb'
require_relative '../lib/constants.rb'

def parse_argv
  items = {}
  ARGV.each do |item|
    key, value = item.split('=')
    if key && value
      value_list = value.split(',')
      items[key] = value_list.length > 1 ? value_list : value
    end
  end
  items
end

# output:
#   eg:
#   {
#     start_time => {
#       gte: '2020-09-10T01:50:00+0800',
#       lte: '2020-09-10T01:53:00+0800'
#     },
#     ...
#   }
def parse_range(ranges)
  range_hash = {}
  ranges.each do |keyword|
    key, value = keyword.split('=')
    if key =~ /^(\+)?([0-9]+d)$/
      value = "now-#{$2}"
      value = "," + value if $1 == "+"
      key = "time"
    elsif value =~ /^\+[0-9]+d$/
      value = ",now-#{value[1..-1]}"
    elsif value =~ /^[0-9]+d$/
      value = "now-#{value}"
    end
    check_range_args(key, value)
    range_hash[key] = assign_range(value)
  end

  range_hash
end

def check_range_args(key, value)
  unless key && value
    warn "error: range value of \"#{key}\" missing", "tips: should give the input of -t like:
    \"#{key}=2021-01-01T00:00:00+0800,2021-01-01T23:59:59+0800\" "
    exit
  end
end

def assign_range(value)
  range_value = {}
  from, to = value.split(',')
  if to
    range_value[:gte] = Time.parse(from).strftime("%FT%H:%M:%S%z") unless from.empty?
    range_value[:lte] = Time.parse(to).strftime("%FT%H:%M:%S%z")
  else
    range_value[:gte] = Time.parse(from).strftime("%FT%H:%M:%S%z")
  end

  range_value
end

options = { index: 'jobs', nr_jobs: 10, desc_keyword: 'start_time' }
opt_hosts = ES_HOSTS
opt_range = []
opt_count = nil
opt_json = nil

opt_parser = OptionParser.new do |opts|
  opts.banner = 'Usage: es-find [options] search_key1=val1[,val2..] ..'

  opts.separator 'search_key can be id, suite, os, etc.'
  opts.separator ''

  opts.on('-l', 'select logging ES DB') do
    opt_hosts = LOGGING_ES_HOSTS
  end

  opts.on('-i', '--index INDEX', 'select ES index') do |i|
    options[:index] = i
  end

  opts.on('-j', '--json JSON', 'raw JSON query') do |j|
    if j.start_with? '@'
      opt_json = JSON.load_file(j[1..-1])
    else
      opt_json = JSON.load(j)
    end
  end

  opts.on('-n', '--nr-jobs NUM', Integer, 'max jobs, default 10.') do |n|
    if n.to_i <= 0
      puts 'The value of the -n option must be a positive number.'
      exit(-1)
    end
    options[:nr_jobs] = n.to_i
  end

  opts.on('-d', '--desc-keyword KEYWORD', 'order by keyword: start_time|end_time|...') do |d|
    options[:desc_keyword] = d
  end

  opts.on('-t', '--time KEYWORD', 'filter range for time/number fields, format: key=start,end') do |r|
    opt_range << r
  end

  opts.on('-c', '--count KEYWORD', 'count keyword: suite|job_state|testbox|id|...') do |c|
    opt_count = c
  end

  opts.on('--reg', 'fuzzy matching') do
    options[:regexp] = true
  end

  opts.on('--keyword', 'check all available search_keys') do
    options[:keyword] = true
  end

  opts.on('--curl CMD', 'curl API') do |cmd|
    options[:curl_args] = cmd.split
  end

  opts.on('--curl-data JSON', 'curl data') do |json|
    options[:curl_args] << json
  end

  opts.on('--cat WHAT', 'cat API') do |what|
    options[:curl_args] = %W(GET /_cat/#{what}?v)
  end

  opts.on('--stats', 'show index stats') do
    options[:curl_args] = %w(GET /_stats)
  end

  opts.on('--field-stats', 'show field stats, only available in recent ES version') do
    options[:curl_args] = %w(GET /<index>/_field_usage_stats)
  end

  opts.on('--disk-usage', 'analyze disk usage, only available in recent ES version') do
    options[:curl_args] = %w(POST /<index>/_disk_usage?run_expensive_tasks=true)
  end

  opts.on_tail('-h', '--help', 'show this message') do
    puts opts
    puts <<EOF

Examples:
    es-find -t 9d -t +3d                        # will expand to -t time=now-9d -t time=,now-3d
    es-find -t submit_time=3d                   # will expand to submit_time=now-3d
    es-find -t submit_time=2024-4-1,2024-5-1    # submit_time in range [2024-4-1,2024-5-1]
    es-find --curl 'GET /_xpack?pretty'
    es-find --curl 'GET /_mapping?pretty'
    es-find --cat indices'
    es-find --cat nodes
    es-find --cat health
EOF
    exit
  end
end

opt_parser.parse!(ARGV)
items = parse_argv
items[:range] = parse_range(opt_range) unless opt_range.empty?

es = ESQuery.new(opt_hosts, index: options[:index])

if options[:curl_args]
  es.run_curl(options[:curl_args])
  exit
end

if options[:keyword]
    available_search_key = es.query_mapping
    format_print(available_search_key, %w(type key))
    exit
end

if opt_json
  query_result = es.query_json(opt_json)
elsif opt_count
  count_keywords = opt_count.split(',')
  query_result = es.query_fields(count_keywords, items)
else
  params = {
    size: options[:nr_jobs],
    regexp: options[:regexp]
  }
  if options[:index] == 'jobs'
    params[:desc_keyword] = options[:desc_keyword]
  end
  query_result = es.multi_field_query(items, params)
end
json_string = JSON.pretty_generate(query_result)
puts json_string
