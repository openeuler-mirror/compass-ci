#!/usr/bin/ruby
# SPDX-License-Identifier: MulanPSL-2.0+
# Copyright (c) 2020 Huawei Technologies Co., Ltd. All rights reserved.
# frozen_string_literal: true

require 'sinatra'

CCI_SRC = ENV['CCI_SRC'] || '/c/compass-ci'
require "#{CCI_SRC}/lib/data_api.rb"
require "#{CCI_SRC}/lib/json_logger.rb"

set :bind, '0.0.0.0'
set :port, 10005
set :show_exceptions, false
set :environment, :production

# POST
# eg1:
#   curl -X POST localhost:10005/data_api/es/jobs/_search -H 'Content-Type: application/json' -d '{
#     "query": {"size":10, "sort": [{"start_time": {"order": "desc"}}]},
#     "cci_credentials": {
#       "my_token": "16132550-...",
#       "my_account": "auto-submit"
#     }
#   }'
# Response:
#   - es_result : JSON
post '/data_api/es/:index/_search' do
  request.body.rewind # in case someone already read it
  es_search(params['index'], request.body.read)
end


# POST
# eg1:
#   curl -X POST localhost:10005/data-api/search -H 'Content-Type: application/json' -d '{
#     "index": jobs,
#     "query": {"size":10, "sort": [{"start_time": {"order": "desc"}}]}
#   }'
# Response:
#   - es_result : JSON
post '/data-api/search' do
  request.body.rewind # in case someone already read it
  body = JSON.parse(request.body.read)
  es_search(body['index'], body.to_json)
end

# POST
# eg1:
#   curl -X POST localhost:10005/data_api/_opendistro/_sql -H 'Content-Type: application/json' -d '{
#     "query": "SELECT * FROM jobs WHERE ...",
#     "cci_credentials": {
#       "my_token": "16132550-...",
#       "my_account": "auto-submit"
#     }
#   }'
# Response:
#   - es_result : JSON
post '/data_api/_opendistro/_sql' do
  request.body.rewind # in case someone already read it
  es_opendistro_sql(request.body.read)
end

post '/data_api/manticore/select' do
  request.body.rewind # in case someone already read it
  manticore_select(request.body.read)
end

def check_xss(params)
  raise 'please input valid params' if params.match? /[^\w\"\'\+\{\}\[\]\.\_\,\ \:\/\-\;\%\=\<\>]/
end

def es_search(index, params)
  begin
    check_xss(params)
    result = EsDataApi.search(index, params)
  rescue StandardError => e
    error_msg = { 'error_msg' => e.message }
    log_error(error_msg)
    return [200, headers.merge('Access-Control-Allow-Origin' => '*'), error_msg.to_json]
  end
  [200, headers.merge('Access-Control-Allow-Origin' => '*'), result.to_json]
end

def es_opendistro_sql(params)
  begin
    result = EsDataApi.opendistro_sql(params)
  rescue StandardError => e
    error_msg = { 'error_msg' => e.message }
    log_error(error_msg)
    return [200, headers.merge('Access-Control-Allow-Origin' => '*'), error_msg.to_json]
  end
  [200, headers.merge('Access-Control-Allow-Origin' => '*'), result.to_json]
end

def manticore_select(params)
  begin
    result = EsDataApi.manticore_select(params)
  rescue StandardError => e
    error_msg = { 'error_msg' => e.message }
    log_error(error_msg)
    return [200, headers.merge('Access-Control-Allow-Origin' => '*'), error_msg.to_json]
  end
  [200, headers.merge('Access-Control-Allow-Origin' => '*'), result.to_json]
end
