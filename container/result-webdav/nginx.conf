# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/

user lkp;
worker_processes auto;
pid /tmp/nginx.pid;
env REDIS_HOST;
env REDIS_PORT;
env REDIS_PASSWD;

events {}

http {
    lua_package_path '$prefix/lua/?.lua;/blah/?.lua;/data/soft/openresty/script/?.lua;/usr/local/openresty/lualib/resty/?.lua;;';
    lua_shared_dict shared_data 10m;

    server {
        listen 3080;
        server_name "result-webdav";
        server_tokens off;
        client_max_body_size 25600m;
        access_log /srv/log/result-webdav/access.log;
        error_log /srv/log/result-webdav/error.log;
        client_body_temp_path /tmp/nginx-client-body;
        proxy_temp_path /tmp/nginx-proxy;
        fastcgi_temp_path /tmp/nginx-fastcgi;
        uwsgi_temp_path /tmp/nginx-uwsgi;
        scgi_temp_path /tmp/nginx-scgi;

        set $run_user "lkp";
        set $user_home "/home/lkp";

        location / {
                allow all;
                root /srv/;

                autoindex on;
                create_full_put_path on;
                dav_methods PUT MKCOL;
                dav_access user:rw group:rw all:rw;

                set $config_upload_condition "false";
                if ( $uri ~ "^/cci/build-config.*" )
                {
                        set $config_upload_condition "true";
                }

                if ( -e $request_filename )
                {
                        set $config_upload_condition "${config_upload_condition}+true";
                }

                if ( $config_upload_condition = "true+true" )
                {
                        return 200;
                }

                access_by_lua_block {
                        function split(str, reps)
                                local resultstrlist = {}
                                string.gsub(str,'[^'..reps..']+',function (w)
                                        if w ~= nil then
                                                table.insert(resultstrlist,w)
                                        end
                                end)
                                return resultstrlist
                        end
                        function symbolic_link(path, upload_file)
                                level_dir = split(path, "/")
                                if level_dir[1] ~= "initrd" or upload_file == nil then
                                        return
                                end
                                if level_dir[2] == "pkg" or level_dir[2] == "build-pkg" or level_dir[2] == "pkgbuild" then
                                        link_name = "latest"
                                else
                                        tmp_name = string.match(upload_file, "(.*)_%d+%.cgz")
                                        if tmp_name then
                                                link_name = tmp_name
                                        else
                                                return
                                        end
                                end
                                link_name = link_name..".cgz"
                                root_path = "/srv/"..path
                                io.popen("mkdir -p "..root_path.." && cd "..root_path.."&& ln -sf "..upload_file.." "..link_name)
                        end

			redis_host = os.getenv("REDIS_HOST")
			redis_port = os.getenv("REDIS_PORT")
			redis_pass = os.getenv("REDIS_PASSWD")

                        local redis = require "resty.redis"
                        local red = redis:new()
                        red:set_timeout(1000)
                        local ok, err = red:connect(redis_host, redis_port)
                        if not ok then
                            ngx.log(ngx.ERR, "connect redis: ", err)
                            ngx.exit(ngx.HTTP_FORBIDDEN)
                                end

                        local ok, err = red:auth(redis_pass)
                        if not ok then
                            ngx.log(ngx.ERR, "failed to authenticate: ", err)
                            ngx.exit(ngx.HTTP_FORBIDDEN)
                        end

                        job_id = ngx.var.cookie_JOBID
                        uri = ngx.var.request_uri
                        path = string.match(uri, "%g*/")
                        upload_file = string.match(uri, "([^/]+)$")

                        local res, err = red:hget("sched/id2upload_dirs", job_id)
                        if not res or res == ngx.null then
                                ngx.log(ngx.ERR, "failed to hget: ", err)
                                ngx.exit(ngx.HTTP_FORBIDDEN)
                        end

                        if string.find(res, ",", 1, true) then
                                dirs = split(res, ",")
                                for i = 1, #dirs do
                                        if string.find(path, dirs[i], 1, true) then
                                                symbolic_link(path, upload_file)
                                                return
                                        end
                                end
                        else
                                if string.find(path, res, 1, true) then
                                        symbolic_link(path, upload_file)
                                        return
                                end
                        end

                        ngx.exit(ngx.HTTP_FORBIDDEN)
                }

                content_by_lua_file conf/lua/upload.lua;
        }
    }
}
